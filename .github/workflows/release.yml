name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        electron: [7.3.2, 9.1.0]
        include:
          - os: macos-latest
            filename: darwin
          - os: ubuntu-latest
            filename: linux
          - os: windows-latest
            filename: win32
          - electron: 7.3.2
            abi: 75
          - electron: 9.1.0
            abi: 80

    name: Build for ${{ matrix.filename }}-${{ matrix.abi }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          sudo apt-get install -y libx11-dev

      - name: Install needed Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install llvm

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.44.1
          override: true
      - uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v2
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            native/target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: yarn

      - name: Build
        run: |
          yarn add electron@${{ matrix.electron }}
          yarn add electron-build-env
          yarn add neon-cli
          yarn build
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.filename }}-${{ matrix.abi }}
          path: native/index.node

  release:
    runs-on: ubuntu-latest
    name: Release
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: download build
        uses: actions/download-artifact@v2
        with:
          path: .artifact
      - name: Copy file
        run: |
          mkdir -p build
          cp .artifact/darwin-75/index.node build/darwin-75.node
          cp .artifact/linux-75/index.node  build/linux-75.node
          cp .artifact/win32-75/index.node  build/win32-75.node
          cp .artifact/darwin-80/index.node build/darwin-80.node
          cp .artifact/linux-80/index.node  build/linux-80.node
          cp .artifact/win32-80/index.node  build/win32-80.node
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install gulp-cli
        run: npm install --global gulp-cli
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ubuntu-latest-yarn-${{ hashFiles('**/yarn.lock') }}
      - run: yarn
      - run: npm install -g vsce
      - run: vsce package
      - run: echo ::set-env name=VSIX_PATH::$(find . -maxdepth 1 -type f -iname "*.vsix" | head -1)
      - run: echo ::set-env name=VSIX_NAME::$(basename $(find . -maxdepth 1 -type f -iname "*.vsix" | head -1))
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: See [CHANGE LOG](https://github.com/YXL76/cloudmusic-vscode/blob/master/CHANGELOG.md) for details.
          draft: false
          prerelease: false
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.VSIX_PATH }}
          asset_name: ${{ env.VSIX_NAME }}
          asset_content_type: application/zip
      - run: vsce publish -p ${{ secrets.VSCE_TOKEN }}
